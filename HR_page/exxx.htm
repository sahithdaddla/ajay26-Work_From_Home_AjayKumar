
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Dashboard - WFH Requests</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6b46c1;
            --primary-light: #d6bcfa;
            --success: #2dd4bf;
            --error: #f87171;
            --warning: #fbbf24;
            --dark: #1f2937;
            --light: #f9fafb;
            --gray: #6b7280;
            --gray-light: #d1d5db;
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            min-height: 100vh;
            color: var(--dark);
            background-color: #ffffff;
        }

        main {
            padding: 1.5rem;
            max-width: 1800px;
            margin: 0 auto;
        }

        /* Header */
        header {
            position: relative;
            text-align: center;
            height: 120px;
            background: linear-gradient(rgb(10, 10, 255),rgb(203, 11, 242));
            color: #fff;
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 20px;
            display: flex;
            width: 100%;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        header h1 {
            margin: 0;
            font-size: 36px;
            color: white;
            font-weight: 600;
            letter-spacing: 2px;
            position: relative;
            z-index: 2;
        }

        header p {
            font-weight: 100;
            font-size: 18px;
            margin-top: 10px;
        }

        @keyframes moveCircles {
            0% { transform: translateY(0) translateX(0); }
            50% { transform: translateY(-50%) translateX(-50%); }
            100% { transform: translateY(0) translateX(0); }
        }

        .banner-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            overflow: hidden;
        }

        .circle {
            position: absolute;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            animation: moveCircles 10s infinite linear;
        }

        .circle:nth-child(1) {
            top: 10%;
            left: 20%;
            animation-duration: 8s;
        }

        .circle:nth-child(2) {
            top: 50%;
            left: 70%;
            animation-duration: 12s;
        }

        .circle:nth-child(3) {
            top: 80%;
            left: 40%;
            animation-duration: 15s;
        }

        /* Search and Filters */
        .search-filter {
            margin-bottom: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .search-container {
            position: relative;
            flex: 1;
        }

        .search-input {
            width: 100%;
            padding: 0.5rem 1rem 0.5rem 2.5rem;
            border: 1px solid var(--gray-light);
            border-radius: 0.5rem;
            font-size: 0.875rem;
            color: var(--dark);
            outline: none;
            transition: var(--transition);
        }

        .search-input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(107, 70, 193, 0.5);
        }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }

        .filter-container {
            display: flex;
            gap: 0.75rem;
        }

        .status-filter {
            padding: 0.5rem 1rem;
            border: 1px solid var(--gray-light);
            border-radius: 0.5rem;
            font-size: 0.875rem;
            background: white;
            width: 330px;
            color: var(--dark);
            outline: none;
            transition: var(--transition);
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%236b7280%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%20grant%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6% Skype7.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 16px 12px;
        }

        .status-filter:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(107, 70, 193, 0.5);
        }

        /* Stats Bar */
        .stats-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .stat-card i {
            font-size: 1.5rem;
        }

        .stat-card .pending-icon {
            color: var(--warning);
        }

        .stat-card .approved-icon {
            color: var(--success);
            background-color: white;
        }

        .stat-card .rejected-icon {
            color: var(--error);
        }

        .stat-card h3 {
            font-size: 0.875rem;
            color: var(--gray);
        }

        .stat-card p {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--dark);
        }

        /* Requests Grid */
        .requests-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        /* Request Card */
        .request-card {
            background: linear-gradient(rgb(249, 249, 255),rgb(255, 255, 255),rgb(255, 247, 255));
            border-radius: 12px;
            transition: var(--transition);
            position: relative;
            border-left: 4px solid transparent;
            padding: 1.25rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
            height: 100%;
            display: flex;
            overflow: hidden;
            flex-direction: column;
        }

        .request-card.pending {
            border-left-color: var(--warning);
        }

        .request-card.approved {
            border-left-color: var(--success);
        }

        .request-card.rejected {
            border-left-color: var(--error);
        }

        .request-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        }

        .request-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.75rem;
        }

        .request-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            min-width: 0;
        }

        .avatar {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            background: #e9d5ff;
            color: #7e22ce;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
            flex-shrink: 0;
        }

        .request-details {
            font-size: 0.875rem;
            min-width: 0;
        }

        .request-name {
            font-weight: 500;
            color: var(--dark);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .request-id {
            color: var(--gray);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .status-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 999px;
            font-size: 0.75rem;
            font-weight: 500;
            white-space: nowrap;
        }

        .status-badge.pending {
            background-color: rgba(255, 253, 248, 0.1);
            color: rgb(181, 181, 0);
        }

        .status-badge.approved {
            background-color: rgba(45, 212, 191, 0.1);
            color: green;
        }

        .status-badge.rejected {
            background-color: rgba(248, 113, 113, 0.1);
            color: red;
        }

        .request-meta {
            margin-top: 0.5rem;
            font-size: 0.875rem;
            color: var(--gray);
            flex-grow: 1;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .meta-item i {
            color: var(--gray);
        }

        .view-btn {
            margin-top: 1rem;
            color: var(--primary);
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            text-decoration: none;
            transition: var(--transition);
            background: none;
            border: none;
            cursor: pointer;
            align-self: flex-start;
        }

        .view-btn:hover {
            color: #7e22ce;
        }

        /* Status Message */
        .status-message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            z-index: 1100;
            transform: translateX(120%);
            transition: transform 0.4s ease, opacity 0.3s ease;
            opacity: 0;
        }

        .

status-message.show {
            transform: translateX(0);
            opacity: 1;
        }

        .status-message.success {
            background-color: rgba(45, 212, 191, 0.1);
            color: var(--success);
            border-left: 4px solid var(--success);
        }

        .status-message.error {
            background-color: rgba(248, 113, 113, 0.1);
            color: var(--error);
            border-left: 4px solid var(--error);
        }

        /* Modal */
        .modal {
            position: fixed;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 50;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .modal.active {
            opacity: 1;
            pointer-events: auto;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: transform 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        .modal.active .modal-content {
            transform: scale(1);
        }

        .modal-header {
            background: linear-gradient(90deg, var(--primary), var(--primary-light));
            color: white;
            padding: 1rem 1.5rem;
            border-top-left-radius: 1rem;
            border-top-right-radius: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .modal-close {
            font-size: 1.5rem;
            color: white;
            background: none;
            border: none;
            cursor: pointer;
            transition: transform 0.3s ease;
            padding: 0.25rem;
        }

        .modal-close:hover {
            transform: rotate(90deg);
        }

        .modal-body {
            padding: 1.5rem;
            overflow-y: auto;
        }

        .modal-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .detail-group {
            margin-bottom: 1rem;
        }

        .detail-group .label {
            font-size: 0.875rem;
            color: var(--gray);
            margin-bottom: 0.25rem;
            font-weight: 500;
        }

        .detail-group .value {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--dark);
            word-break: break-word;
        }

        .reason-box {
            background: rgba(107, 70, 193, 0.05);
            border-left: 4px solid var(--primary);
            padding: 1.25rem;
            border-radius: 0.5rem;
            margin-top: 1.5rem;
            text-align: left;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .reason-box h4 {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--dark);
        }

        .reason-box p {
            font-size: 0.875rem;
            color: var(--gray);
            line-height: 1.6;
            word-break: break-word;
            margin: 0;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--gray-light);
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
            position: sticky;
            bottom: 0;
            background: white;
            border-bottom-left-radius: 1rem;
            border-bottom-right-radius: 1rem;
        }

        .btn {
            padding: 0.5rem 1.5rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn i {
            font-size: 0.875rem;
        }

        .btn-approve {
            background: var(--success);
            color: white;
        }

        .btn-approve:hover {
            background: #26a69a;
        }

        .btn-reject {
            background: var(--error);
            color: white;
        }

        .btn-reject:hover {
            background: #dc2626;
        }

        /* Confirmation Modal */
        .confirmation-modal .modal-content {
            max-width: 28rem;
            text-align: center;
        }

        .confirmation-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .confirmation-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .confirmation-message {
            font-size: 0.875rem;
            color: var(--gray);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }

        .confirmation-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        .btn-cancel {
            background: var(--gray-light);
            color: var(--dark);
        }

        .btn-cancel:hover {
            background: #b3b3b3;
        }

        .btn-confirm-approve {
            background: var(--success);
            color: white;
        }

        .btn-confirm-approve:hover {
            background: #26a69a;
        }

        .btn-confirm-reject {
            background: var(--error);
            color: white;
        }

        .btn-confirm-reject:hover {
            background: #dc2626;
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(10px); }
            100% { opacity: 1; transform: translateY(0); }
        }

        /* Responsive Design */
        @media (min-width: 640px) {
            .search-filter {
                flex-direction: row;
            }

            .stats-container {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @media (max-width: 640px) {
            .filter-container {
                flex-direction: column;
            }

            .status-filter {
                width: 100%;
            }

            .requests-container {
                grid-template-columns: 1fr;
            }

            .modal-details {
                grid-template-columns: 1fr;
            }
        }

        @media (min-width: 1024px) {
            .requests-container {
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            }
        }
    </style>
</head>
<body>
    <!-- Main Content -->
    <main>
        <header>
            <div class="banner-background">
                <div class="circle"></div>
                <div class="circle"></div>
                <div class="circle"></div>
            </div>
            <h1>Work From Home Requests</h1>
            <p>Track and Manage the Work From Home Request From Here</p>
        </header>

        <!-- Search and Filters -->
        <div class="search-filter">
            <div class="search-container">
                <input type="text" id="searchInput" class="search-input" placeholder="Search by name or employee ID...">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="filter-container">
                <select id="statusFilter" class="status-filter">
                    <option value="All">All Statuses</option>
                    <option value="Pending">Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                </select>
            </div>
        </div>

        <!-- Top Stats Bar -->
        <div class="stats-container">
            <div class="stat-card" style="background:linear-gradient(rgb(255, 255, 230) , rgb(255, 251, 237));">
                <i class="fas fa-clock pending-icon"></i>
                <div>
                    <h3>Pending Requests</h3>
                    <p id="pendingCount">0</p>
                </div>
            </div>
            <div class="stat-card" style="background:linear-gradient(rgb(244, 255, 230) , rgb(244, 255, 237));">
                <i class="fas fa-check-circle approved-icon"></i>
                <div>
                    <h3>Approved Requests</h3>
                    <p id="approvedCount">0</p>
                </div>
            </div>
            <div class="stat-card" style="background:linear-gradient(rgb(255, 233, 230) , rgb(255, 251, 237));">
                <i class="fas fa-times-circle rejected-icon"></i>
                <div>
                    <h3>Rejected Requests</h3>
                    <p id="rejectedCount">0</p>
                </div>
            </div>
        </div>

        <!-- Requests Grid -->
        <div class="requests-container" id="requestsContainer"></div>
    </main>

    <!-- Status Message Container -->
    <div id="statusMessageContainer"></div>

    <!-- Request Detail Modal -->
    <div class="modal" id="requestModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">WFH Request Details</h3>
                <button class="modal-close" id="modalClose">×</button>
            </div>
            <div class="modal-body">
                <div class="modal-details" id="modalDetails"></div>
                <div class="reason-box">
                    <h4>Reason for Request</h4>
                    <p id="reasonText"></p>
                </div>
            </div>
            <div class="modal-footer" id="modalFooter"></div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal confirmation-modal" id="confirmationModal">
        <div class="modal-content">
            <div class="confirmation-icon" id="confirmationIcon">
                <i class="fas fa-question-circle"></i>
            </div>
            <h3 class="modal-title" id="confirmationTitle">Confirm Action</h3>
            <p class="confirmation-message" id="confirmationMessage">
                Are you sure you want to perform this action?
            </p>
            <div class="confirmation-buttons">
                <button class="btn btn-cancel" id="confirmCancel">Cancel</button>
                <button class="btn" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>

    <script>
        const BASE_URL = 'http://16.171.140.12:3078';

        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const modal = document.getElementById('requestModal');
            const confirmationModal = document.getElementById('confirmationModal');
            const modalClose = document.getElementById('modalClose');
            const confirmCancel = document.getElementById('confirmCancel');
            const confirmAction = document.getElementById('confirmAction');
            const requestsContainer = document.getElementById('requestsContainer');
            const statusMessageContainer = document.getElementById('statusMessageContainer');
            const pendingCountEl = document.getElementById('pendingCount');
            const approvedCountEl = document.getElementById('approvedCount');
            const rejectedCountEl = document.getElementById('rejectedCount');
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');

            let currentAction = null;
            let currentRequestId = null;
            let allRequests = [];

            // Initialize
            fetchRequests();
            setupEventListeners();

            function setupEventListeners() {
                modalClose.addEventListener('click', closeModal);
                confirmCancel.addEventListener('click', closeConfirmationModal);
                confirmAction.addEventListener('click', handleConfirmAction);
                searchInput.addEventListener('input', filterRequests);
                statusFilter.addEventListener('change', filterRequests);
            }

            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }

            function showStatusMessage(type, message) {
                const messageEl = document.createElement('div');
                messageEl.className = `status-message ${type}`;
                messageEl.innerHTML = `
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                `;
                statusMessageContainer.appendChild(messageEl);
                void messageEl.offsetWidth; // Trigger reflow
                messageEl.classList.add('show');
                setTimeout(() => {
                    messageEl.classList.remove('show');
                    setTimeout(() => messageEl.remove(), 300);
                }, 5000);
            }

            async function fetchRequests() {
                try {
                    const response = await fetch(`${BASE_URL}/api/requests`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error('Failed to fetch requests');
                    allRequests = await response.json();
                    renderStats(allRequests);
                    renderRequests(allRequests);
                } catch (error) {
                    console.error('Error fetching requests:', error);
                    requestsContainer.innerHTML = `
                        <div class="text-center p-8 text-gray-500">
                            <i class="fas fa-exclamation-circle text-4xl mb-2"></i>
                            <p>Error loading requests</p>
                        </div>
                    `;
                    showStatusMessage('error', 'Failed to load requests');
                }
            }

            function renderStats(requests) {
                const pendingCount = requests.filter(req => req.status === 'Pending').length;
                const approvedCount = requests.filter(req => req.status === 'Approved').length;
                const rejectedCount = requests.filter(req => req.status === 'Rejected').length;

                pendingCountEl.textContent = pendingCount;
                approvedCountEl.textContent = approvedCount;
                rejectedCountEl.textContent = rejectedCount;
            }

            function filterRequests() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedStatus = statusFilter.value;

                const filteredRequests = allRequests.filter(request => {
                    const matchesSearch = request.name.toLowerCase().includes(searchTerm) || 
                                         request.employee_id.toLowerCase().includes(searchTerm);
                    const matchesStatus = selectedStatus === 'All' || request.status === selectedStatus;
                    return matchesSearch && matchesStatus;
                });

                renderStats(filteredRequests);
                renderRequests(filteredRequests);
            }

            function renderRequests(requests) {
                requestsContainer.innerHTML = '';
                if (requests.length === 0) {
                    requestsContainer.innerHTML = `
                        <div class="text-center p-8 text-gray-500">
                            <i class="fas fa-info-circle text-4xl mb-2"></i>
                            <p>No requests found</p>
                        </div>
                    `;
                    return;
                }

                requests.forEach(request => {
                    const card = document.createElement('div');
                    card.className = `request-card fade-in ${request.status.toLowerCase()}`;
                    card.innerHTML = `
                        <div class="request-header">
                            <div class="request-info">
                                <div class="avatar">${request.name.charAt(0)}${request.name.split(' ')[1]?.charAt(0) || ''}</div>
                                <div class="request-details">
                                    <div class="request-name" title="${request.name}">${request.name}</div>
                                    <div class="request-id">${request.employee_id}</div>
                                </div>
                            </div>
                            <div class="status-badge ${request.status.toLowerCase()}">
                                <i class="fas fa-${request.status === 'Pending' ? 'clock' : request.status === 'Approved' ? 'check-circle' : 'times-circle'} mr-1"></i>
                                ${request.status}
                            </div>
                        </div>
                        <div class="request-meta">
                            <div class="meta-item">
                                <i class="fas fa-calendar-day"></i>
                                <span>${formatDate(request.from_date)} - ${formatDate(request.to_date)}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>${request.location}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-project-diagram"></i>
                                <span>${request.project}</span>
                            </div>
                        </div>
                        <button class="view-btn" data-id="${request.id}">
                            View Details <i class="fas fa-chevron-right"></i>
                        </button>
                    `;
                    requestsContainer.appendChild(card);
                });

                document.querySelectorAll('.view-btn').forEach(button => {
                    button.addEventListener('click', () => showRequestDetails(button.getAttribute('data-id')));
                });
            }

            async function showRequestDetails(requestId) {
                try {
                    const response = await fetch(`${BASE_URL}/api/requests/${requestId}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error('Failed to fetch request');
                    const request = await response.json();

                    document.getElementById('modalDetails').innerHTML = `
                        <div class="detail-group">
                            <div class="label">Employee Name</div>
                            <div class="value">${request.name}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Employee ID</div>
                            <div class="value">${request.employee_id}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Email</div>
                            <div class="value">${request.email}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Project</div>
                            <div class="value">${request.project}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Reporting Manager</div>
                            <div class="value">${request.manager}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Location</div>
                            <div class="value">${request.location}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">From Date</div>
                            <div class="value">${formatDate(request.from_date)}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">To Date</div>
                            <div class="value">${formatDate(request.to_date)}</div>
                        </div>
                        <div class="detail-group">
                            <div class="label">Status</div>
                            <div class="value">
                                <span class="status-badge ${request.status.toLowerCase()}">${request.status}</span>
                            </div>
                        </div>
                    `;
                    document.getElementById('reasonText').textContent = request.reason || 'No reason provided';

                    // Show action buttons only if the request is pending
                    document.getElementById('modalFooter').innerHTML = request.status === 'Pending' ? `
                        <button class="btn btn-approve" data-id="${request.id}">
                            <i class="fas fa-check"></i> Approve
                        </button>
                        <button class="btn btn-reject" data-id="${request.id}">
                            <i class="fas fa-times"></i> Reject
                        </button>
                    ` : '';

                    // Add event listeners for action buttons
                    document.querySelectorAll('.btn-approve, .btn-reject').forEach(button => {
                        button.addEventListener('click', () => {
                            const action = button.classList.contains('btn-approve') ? 'approve' : 'reject';
                            showConfirmationModal(action, request.id);
                        });
                    });

                    openModal();
                } catch (error) {
                    console.error('Error fetching request details:', error);
                    showStatusMessage('error', 'Failed to load request details');
                }
            }

            function openModal() {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            function closeModal() {
                modal.classList.remove('active');
                document.body.style.overflow = '';
            }

            function showConfirmationModal(action, requestId) {
                currentAction = action;
                currentRequestId = requestId;
                const isApprove = action === 'approve';
                document.getElementById('confirmationIcon').innerHTML = `
                    <i class="fas ${isApprove ? 'fa-check-circle text-teal-500' : 'fa-times-circle text-red-500'}"></i>
                `;
                document.getElementById('confirmationTitle').textContent = isApprove ? 'Approve Request' : 'Reject Request';
                document.getElementById('confirmationMessage').textContent = `Are you sure you want to ${action} this WFH request?`;
                document.getElementById('confirmAction').className = `btn ${isApprove ? 'btn-confirm-approve' : 'btn-confirm-reject'}`;
                document.getElementById('confirmAction').innerHTML = isApprove ? 
                    '<i class="fas fa-check"></i> Approve' : 
                    '<i class="fas fa-times"></i> Reject';
                confirmationModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            function closeConfirmationModal() {
                confirmationModal.classList.remove('active');
                currentAction = null;
                currentRequestId = null;
                document.body.style.overflow = '';
            }

            async function handleConfirmAction() {
                if (!currentAction || !currentRequestId) return;

                const status = currentAction === 'approve' ? 'Approved' : 'Rejected';
                try {
                    const response = await fetch(`${BASE_URL}/api/requests/${currentRequestId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status })
                    });

                    if (!response.ok) throw new Error(`Failed to ${currentAction} request`);

                    closeConfirmationModal();
                    closeModal();
                    showStatusMessage('success', `Request ${status.toLowerCase()} successfully`);
                    fetchRequests();
                } catch (error) {
                    console.error(`Error ${currentAction}ing request:`, error);
                    showStatusMessage('error', `Failed to ${currentAction} request`);
                }
            }
        });
    </script>
</body>
</html>